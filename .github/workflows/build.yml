name: build

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master


env:
  GITHUB_REF: ${{ github.ref }}
  GITHUB_SHA: ${{ github.sha }}
  IMAGE_PREFIX: pangeo/


jobs:
  base-notebook:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Set Up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Print env vars
      run: |
        echo $GITHUB_SHA
        echo $( git rev-parse --short ${GITHUB_SHA} )

    - name: Enable Pip Cache
      # https://github.com/actions/cache/blob/master/examples.md#python---pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python --version
        pip install -r requirements.txt
        repo2docker --version
        docker version

    - name: Build Image
      # Add folder of artifacts related to build that anyone can download
      run: |
        python3 build.py --image-prefix=${IMAGE_PREFIX} base-notebook

    - name: Authenticate with DockerHub
      #if: startswith(github.ref, 'refs/tags') || github.ref == 'refs/heads/master'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push Image to DockerHub (latest & sha tags)
      # Only push if merge to master or pushed tag with v1.2.3 semantic version
      #if: github.ref == 'refs/heads/master'
      # Tag with short 7-character SHA
      run: |
        IMAGE=base-notebook
        CALVER="$( date -u '+%Y.%m.%d' )"
        SHA="$( git rev-parse --short ${GITHUB_SHA} )"
        DOCKER_TAG=${CALVER}-${SHA}

        IMAGE_NAME=${IMAGE_PREFIX}${IMAGE}:${DOCKER_TAG}
        IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}:latest
        ONBUILD_IMAGE_NAME=${IMAGE_PREFIX}${IMAGE}-onbuild:${DOCKER_TAG}
        ONBUILD_IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}-onbuild:latest

        docker tag $IMAGE_NAME $IMAGE_LATEST
        docker tag $ONBUILD_IMAGE_NAME $ONBUILD_IMAGE_LATEST

        docker push $IMAGE_LATEST
        docker push $IMAGE_NAME
        docker push $ONBUILD_IMAGE_LATEST
        docker push $ONBUILD_IMAGE_NAME

  pangeo-notebook:
    needs: base-notebook
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1
    - name: Set Up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Enable Pip Cache
      # https://github.com/actions/cache/blob/master/examples.md#python---pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        python --version
        pip install -r requirements.txt
        repo2docker --version
        docker version
    - name: Authenticate with DockerHub
      if: startswith(github.ref, 'refs/tags') || github.ref == 'refs/heads/master'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Build Image
      # Add folder of artifacts related to build that anyone can download
      run: |
        python3 build.py --image-prefix=${IMAGE_PREFIX} pangeo-notebook
    - name: Push Image to DockerHub (latest & sha tags)
      # Only push if merge to master or pushed tag with v1.2.3 semantic version
      if: github.ref == 'refs/heads/master'
      # Tag with short 7-character SHA
      run: |
        IMAGE=pangeo-notebook
        CALVER="$( date -u '+%Y.%m.%d' )"
        SHA="$( git rev-parse --short ${GITHUB_SHA} )"
        DOCKER_TAG=${CALVER}-${SHA}

        IMAGE_NAME=${IMAGE_PREFIX}${IMAGE}:${DOCKER_TAG}
        IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}:latest
        ONBUILD_IMAGE_NAME=${IMAGE_PREFIX}${IMAGE}-onbuild:${DOCKER_TAG}
        ONBUILD_IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}-onbuild:latest

        docker tag $IMAGE_NAME $IMAGE_LATEST
        docker tag $ONBUILD_IMAGE_NAME $ONBUILD_IMAGE_LATEST

        docker push $IMAGE_LATEST
        docker push $IMAGE_NAME
        docker push $ONBUILD_IMAGE_LATEST
        docker push $ONBUILD_IMAGE_NAME
  pangeo-esip:
    needs: base-notebook
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1
    - name: Set Up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Enable Pip Cache
      # https://github.com/actions/cache/blob/master/examples.md#python---pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        python --version
        pip install -r requirements.txt
        repo2docker --version
        docker version
    - name: Authenticate with DockerHub
      if: startswith(github.ref, 'refs/tags') || github.ref == 'refs/heads/master'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Build Image
      # Add folder of artifacts related to build that anyone can download
      run: |
        python3 build.py --image-prefix=${IMAGE_PREFIX} pangeo-esip
    - name: Push Image to DockerHub (latest & sha tags)
      # Only push if merge to master or pushed tag with v1.2.3 semantic version
      if: github.ref == 'refs/heads/master'
      # Tag with short 7-character SHA
      run: |
        IMAGE=pangeo-esip
        CALVER="$( date -u '+%Y.%m.%d' )"
        SHA="$( git rev-parse --short ${GITHUB_SHA} )"
        DOCKER_TAG=${CALVER}-${SHA}

        IMAGE_NAME=${IMAGE_PREFIX}${IMAGE}:${DOCKER_TAG}
        IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}:latest
        ONBUILD_IMAGE_NAME=${IMAGE_PREFIX}${IMAGE}-onbuild:${DOCKER_TAG}
        ONBUILD_IMAGE_LATEST=${IMAGE_PREFIX}${IMAGE}-onbuild:latest

        docker tag $IMAGE_NAME $IMAGE_LATEST
        docker tag $ONBUILD_IMAGE_NAME $ONBUILD_IMAGE_LATEST

        docker push $IMAGE_LATEST
        docker push $IMAGE_NAME
        docker push $ONBUILD_IMAGE_LATEST
        docker push $ONBUILD_IMAGE_NAME
